"use strict";(self.webpackChunkklerk_website=self.webpackChunkklerk_website||[]).push([[9989],{3521:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var i=t(4848),o=t(8453);const s={sidebar_position:4},r="DSL and functions",a={id:"building-config/pure-functions",title:"DSL and functions",description:"A common theme is that you use Klerk's domain specific language (DSL) to describe the system on a high level and supply",source:"@site/docs/building-config/pure-functions.md",sourceDirName:"building-config",slug:"/building-config/pure-functions",permalink:"/website/docs/building-config/pure-functions",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Collections",permalink:"/website/docs/building-config/collections"},next:{title:"Models and Types",permalink:"/website/docs/building-config/models-types"}},c={},u=[{value:"Pure functions",id:"pure-functions",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"dsl-and-functions",children:"DSL and functions"}),"\n",(0,i.jsx)(n.p,{children:"A common theme is that you use Klerk's domain specific language (DSL) to describe the system on a high level and supply\nfunctions to specify the details of how the framework should behave. These functions will\nbe called by the framework at the appropriate times."}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["Design the system top-down, i.e. start with outlining the big pieces and leave the details for later.\nIn Klerk, this means that you start with the DSL. Only turn your attention to the functions when you are satisfied with the specification.\nYou still have to create the functions so that you can\nadd them in the DSL, but just put a ",(0,i.jsx)(n.code,{children:"TODO()"})," in the function body for now."]}),(0,i.jsxs)(n.p,{children:["Klerk provides limited functionality even when the function bodies are empty. It is not possible\nto read data and issue commands, but it ",(0,i.jsx)(n.em,{children:"is"})," possible to view the generated documentation in the Admin UI.\nTake advantage of this: use the state diagrams to make sure the specification is accepted by all stakeholders before writing any code in the function bodies."]}),(0,i.jsx)(n.p,{children:"Since writing the function bodies and the corresponding unit tests is often straightforward, these tasks can be suitable for junior developers."})]}),"\n",(0,i.jsx)(n.h2,{id:"pure-functions",children:"Pure functions"}),"\n",(0,i.jsxs)(n.p,{children:["These functions should be ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Pure_function",children:"pure"}),", which means:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"the function's return value is identical for identical arguments"}),"\n",(0,i.jsx)(n.li,{children:"the function has no side effect"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["It is acceptable to use ",(0,i.jsx)(n.code,{children:"require()"}),", ",(0,i.jsx)(n.code,{children:"requireNonNull()"})," or similar even though they can throw ",(0,i.jsx)(n.code,{children:"IllegalArgumentException"})," which\nmakes the\nfunction impure. Note that the function should never actually throw, so you should only use them if you know that they\nwill not throw. If your function actually throws, this means that the system has a bug! The bug may not\nnecessarily reside in the function that throws. To exemplify: Suppose your an event triggers an update of a model. The\nupdate function will return a new model that contains the logged in user's ID in the property ",(0,i.jsx)(n.code,{children:"acceptedByUsers"}),". You\nknow that the update can only be triggered by an logged in user since you have added a validation rule on the triggering\nevent, so it is safe to have"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"requireNonNull(args.context.loggedInUser)\n"})}),"\n",(0,i.jsx)(n.p,{children:"in the update function. If the update function ever\nthrows an exception, you have a bug and need to figure out how context.loggedInUser could be null when\nthe update was triggered."}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.p,{children:"Don't worry about remembering which parameters a function should take and what the return\ntype should be. The IDE will help you! First tell Klerk about the function in the DSL:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"authentication {\n   readModel {\n      positive {\n         rule(::generalsCanReadSecretReports)\n         ...\n"})}),(0,i.jsx)(n.p,{children:"Then ask the IDE to generate the function for you. In IntelliJ, use Alt+enter to bring up the context actions."})]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);