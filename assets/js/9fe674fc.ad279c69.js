"use strict";(self.webpackChunkklerk_website=self.webpackChunkklerk_website||[]).push([[9603],{3289:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var i=n(4848),s=n(8453);const o={sidebar_position:2},r="Reading data",d={id:"usage/reading",title:"Reading data",description:"The following naming is used:",source:"@site/docs/usage/reading.md",sourceDirName:"usage",slug:"/usage/reading",permalink:"/website/docs/usage/reading",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/website/docs/usage/commands"},next:{title:"Topics",permalink:"/website/docs/category/topics"}},a={},l=[{value:"Read one thing",id:"read-one-thing",level:2},{value:"Read two or three things",id:"read-two-or-three-things",level:2},{value:"Read many things",id:"read-many-things",level:2},{value:"Keep the lock while doing other things",id:"keep-the-lock-while-doing-other-things",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"reading-data",children:"Reading data"}),"\n",(0,i.jsx)(t.p,{children:"The following naming is used:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"get: throws an exception if the item doesn't exist or if the actor is\nunauthorized. Use this if you expect the model to exist and be readable by the actor."}),"\n",(0,i.jsx)(t.li,{children:"find: returns null if the item doesn't exist but throws if the actor is\nunauthorized. Use this when you are not sure if the model exists (but if it exists it is readable by the actor)."}),"\n",(0,i.jsx)(t.li,{children:"list: returns a list (which can be empty if no items were found). Throws if\nthe actor is unauthorized. Use this if the actor should be able to read all models."}),"\n",(0,i.jsx)(t.li,{children:"tryGet / tryList: returns a Failure or a Success. Never throws if there is a problem."}),"\n",(0,i.jsx)(t.li,{children:"-ifAuthorized: removes the item if unauthorized."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"read-one-thing",children:"Read one thing"}),"\n",(0,i.jsx)(t.p,{children:"The simplest way of reading a model (assuming you have a context and a model id) is"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"val myModel = klerk.read(context) { get(id) }\n"})}),"\n",(0,i.jsx)(t.p,{children:"Similarly, if you want to read a list of models:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"val myTodos = klerk.read(context) { list(data.todos.all) }\n"})}),"\n",(0,i.jsx)(t.h2,{id:"read-two-or-three-things",children:"Read two or three things"}),"\n",(0,i.jsx)(t.p,{children:"For two things, use a Pair and destructing declaration:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"val (first, second) = klerk.read(context) {\n    Pair(get(firstId), get(secondId))\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"For three things, use a Triple and destructing declaration:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"val (first, second, third) = klerk.read(context) {\n    Triple(get(firstId), get(secondId), get(thirdId))\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"read-many-things",children:"Read many things"}),"\n",(0,i.jsx)(t.p,{children:"Use a data class to return more than three things at once:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"val manyThings = klerk.read(context) {\n    val todo = get(todoId)\n    val owner = get(todo.props.owner)\n    val someState = get(someId).state\n    val numberOfTodos = list(data.todos.all).size\n    data class ManyThings(val todo: Model<Todo>, val user: Model<User>, val someState: String, val numberOfTodos: Int)\n    ManyThings(todo, owner, someState, numberOfTodos)\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"keep-the-lock-while-doing-other-things",children:"Keep the lock while doing other things"}),"\n",(0,i.jsx)(t.p,{children:"It is often best to release the lock as soon as possible as performance may degrade otherwise. But if you know that\nperformance is not an issue, it is possible to do suspending stuff while keeping the lock using the readSuspend method.\nThis may lead to simpler code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'suspend fun renderWebPage(call: ApplicationCall) {\n    ...\n    klerk.readSuspend(call.context()) {\n        call.respondHtml {\n            body {\n                h1 { +"Hello ${get(userId).props.name}" }\n                +"Your Todo for today is in state: ${get(todoId).state}"\n            }\n        }\n    }\n}\n'})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var i=n(6540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);